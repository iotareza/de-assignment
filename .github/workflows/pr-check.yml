name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run linting
      run: |
        echo "Running code linting..."
        make ci-lint
        
    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        make ci-format-check
        
    - name: Check for security vulnerabilities
      run: |
        echo "Checking for security vulnerabilities..."
        pip install safety
        safety check --full-report

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        make ci-test
        
    - name: Validate DAG syntax
      run: |
        echo "Validating DAG syntax..."
        python -c "from dags.news_sentiment_pipeline import dag; print('✅ News pipeline DAG syntax OK')"
        python -c "from dags.movielens_analytics_pipeline import dag; print('✅ MovieLens pipeline DAG syntax OK')"
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test data utilities
      run: |
        echo "Testing data utilities..."
        python -c "from src.data_utils import download_and_upload_movielens_data, verify_s3_data; print('✅ Data utilities imported successfully')"
        
    - name: Test alerting service
      run: |
        echo "Testing alerting service..."
        python -c "from src.alerting_service import AlertingService, send_task_failure_alert; print('✅ Alerting service imported successfully')"
        
    - name: Test Spark applications
      run: |
        echo "Testing Spark applications..."
        ls -la src/spark_apps/
        echo "✅ Spark applications found"

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for documentation files
      run: |
        echo "Checking documentation..."
        if [ -f "README.md" ]; then
          echo "✅ README.md found"
        else
          echo "❌ README.md missing"
          exit 1
        fi
        
        if [ -f "ALERTING_SYSTEM.md" ]; then
          echo "✅ ALERTING_SYSTEM.md found"
        else
          echo "❌ ALERTING_SYSTEM.md missing"
          exit 1
        fi
        
        if [ -f "requirements.txt" ]; then
          echo "✅ requirements.txt found"
        else
          echo "❌ requirements.txt missing"
          exit 1
        fi
        
        echo "✅ All required documentation files present"
        
    - name: Check deployment script
      run: |
        echo "Checking deployment script..."
        if [ -f "scripts/deploy.sh" ]; then
          echo "✅ deploy.sh found"
          chmod +x scripts/deploy.sh
        else
          echo "❌ deploy.sh missing"
          exit 1
        fi 