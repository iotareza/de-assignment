name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  AIRFLOW_VERSION: '2.7.0'

jobs:
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        
    - name: Lint code
      run: |
        echo "Running code linting..."
        make ci-lint
        
    - name: Format check
      run: |
        echo "Checking code formatting..."
        make ci-format-check
        
    - name: Run tests
      run: |
        echo "Running tests..."
        make ci-test
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        echo "Creating deployment package..."
        mkdir -p deployment
        cp -r dags/ deployment/
        cp -r src/ deployment/
        cp -r init-scripts/ deployment/
        cp -r spark-jars/ deployment/
        cp docker-compose.yml deployment/
        cp Dockerfile deployment/
        cp Dockerfile.spark deployment/
        cp requirements.txt deployment/
        cp .env.example deployment/.env
        tar -czf deployment-package.tar.gz deployment/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # This would typically involve deploying to a staging environment
        # For now, we'll simulate the deployment
        echo "Deployment package created successfully"
        echo "DAGs to be deployed:"
        ls -la deployment/dags/
        echo "Source code to be deployed:"
        ls -la deployment/src/
        
    - name: Validate deployment
      run: |
        echo "Validating deployment..."
        # Check if all required files are present
        if [ -f "deployment/dags/news_sentiment_pipeline.py" ]; then
          echo "‚úÖ News sentiment pipeline found"
        else
          echo "‚ùå News sentiment pipeline missing"
          exit 1
        fi
        
        if [ -f "deployment/dags/movielens_analytics_pipeline.py" ]; then
          echo "‚úÖ MovieLens analytics pipeline found"
        else
          echo "‚ùå MovieLens analytics pipeline missing"
          exit 1
        fi
        
        if [ -f "deployment/src/alerting_service.py" ]; then
          echo "‚úÖ Alerting service found"
        else
          echo "‚ùå Alerting service missing"
          exit 1
        fi
        
        echo "‚úÖ All required components validated"
        
    - name: Notify deployment success
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üìä Deployed components:"
        echo "   - News Sentiment Pipeline"
        echo "   - MovieLens Analytics Pipeline"
        echo "   - Alerting System"
        echo "   - Spark Applications"
        echo "   - Database Initialization Scripts" 