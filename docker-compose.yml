services:
  # PostgreSQL for Airflow metadata and sentiment data
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: airflow
    volumes:
      - ./.docker/postgres:/var/lib/postgresql
      - ./init-scripts/init-sentiment-db.sql:/docker-entrypoint-initdb.d/01-init-sentiment-db.sql
      - ./init-scripts/init-url-tracking.sql:/docker-entrypoint-initdb.d/02-init-url-tracking.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow-network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./.docker/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - airflow-network

  # Redis for Airflow (optional but recommended)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./.docker/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow-network

  # MinIO Client for bucket initialization
  minio-client:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin) do echo '...waiting...' && sleep 1; done;
      mc mb myminio/news-data --ignore-existing;
      mc mb myminio/movielens-data --ignore-existing;
      echo 'MinIO buckets created successfully';
      sleep 60;
      exit 0;
      "
    restart: "no"
    networks:
      - airflow-network

  # Spark Master
  spark-master:
    image: custom-spark:3.5.0-python3.9
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_EXTRA_CLASSPATH=/opt/spark/jars/hadoop-aws-3.3.4.jar:/opt/spark/jars/aws-java-sdk-bundle-1.12.261.jar
      - SPARK_CONF_DIR=/opt/spark/conf
      # Python version configuration to ensure consistency
      - PYSPARK_PYTHON=python3.9
      - PYSPARK_DRIVER_PYTHON=python3.9
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./spark-jars:/opt/spark/jars
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.master.Master"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - airflow-network

  # Spark Worker
  spark-worker:
    image: custom-spark:3.5.0-python3.9
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=3G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_EXTRA_CLASSPATH=/opt/spark/jars/hadoop-aws-3.3.4.jar:/opt/spark/jars/aws-java-sdk-bundle-1.12.261.jar
      - SPARK_CONF_DIR=/opt/spark/conf
      # Python version configuration to ensure consistency
      - PYSPARK_PYTHON=python3.9
      - PYSPARK_DRIVER_PYTHON=python3.9
    depends_on:
      spark-master:
        condition: service_healthy
    volumes:
      - ./spark-jars:/opt/spark/jars
    networks:
      - airflow-network

  # Airflow Webserver
  airflow-webserver:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      spark-master:
        condition: service_healthy
    environment:
      # Airflow Configuration
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: RUUSfz87orYADZfGj4QaB0c7UNYr7wN3ltPMSmIj70Y=
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__SECRET_KEY: test-123
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@postgres:5432/airflow
      
      # S3/MinIO Configuration
      S3_ENDPOINT: minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: movielens-data
      S3_USE_SSL: "false"
      
      # PostgreSQL Configuration for sentiment data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: airflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      
      # Spark Configuration
      SPARK_MASTER_URL: spark://spark-master:7077
      
      # Application Configuration
      LOG_LEVEL: INFO
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./spark-jars:/opt/spark/jars
    command: bash -c "airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin && airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - airflow-network

  # Airflow Scheduler
  airflow-scheduler:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      spark-master:
        condition: service_healthy
    environment:
      # Airflow Configuration
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: RUUSfz87orYADZfGj4QaB0c7UNYr7wN3ltPMSmIj70Y=
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@postgres:5432/airflow
      
      # S3/MinIO Configuration
      S3_ENDPOINT: minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: movielens-data
      S3_USE_SSL: "false"
      
      # PostgreSQL Configuration for sentiment data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: sentiment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      
      # Spark Configuration
      SPARK_MASTER_URL: spark://spark-master:7077
      
      # Application Configuration
      LOG_LEVEL: INFO
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./spark-jars:/opt/spark/jars
    command: bash -c "airflow db init && airflow scheduler"
    networks:
      - airflow-network

  # Airflow Worker
  airflow-worker:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
      spark-master:
        condition: service_healthy
    environment:
      # Airflow Configuration
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: RUUSfz87orYADZfGj4QaB0c7UNYr7wN3ltPMSmIj70Y=
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@postgres:5432/airflow
      
      # S3/MinIO Configuration
      S3_ENDPOINT: minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: movielens-data
      S3_USE_SSL: "false"
      
      # PostgreSQL Configuration for sentiment data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: sentiment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      
      # Spark Configuration
      SPARK_MASTER_URL: spark://spark-master:7077
      
      # Application Configuration
      LOG_LEVEL: INFO
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./spark-jars:/opt/spark/jars
    command: airflow celery worker
    networks:
      - airflow-network

  # Airflow Flower (Celery monitoring)
  airflow-flower:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    environment:
      # Airflow Configuration
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: RUUSfz87orYADZfGj4QaB0c7UNYr7wN3ltPMSmIj70Y=
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@postgres:5432/airflow
      
      # S3/MinIO Configuration
      S3_ENDPOINT: minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: movielens-data
      S3_USE_SSL: "false"
      
      # PostgreSQL Configuration for sentiment data
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: sentiment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      
      # Spark Configuration
      SPARK_MASTER_URL: spark://spark-master:7077
      
      # Application Configuration
      LOG_LEVEL: INFO
    ports:
      - "5555:5555"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./spark-jars:/opt/spark/jars
    command: airflow celery flower
    networks:
      - airflow-network

networks:
  airflow-network:
    driver: bridge 